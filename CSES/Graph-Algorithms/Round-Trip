vector<int> list[100010];
vector<int> visited(100010,0);
vector<int> parent(100010,-1);
//After finding a cycle , we will retrive that cycle with the help of Parent vector.
void dfs(int node,int par){
    visited[node] = 1;
    parent[node] = par;
    
    for(int i = 0;i<list[node].size();i++){
        int ele = list[node][i];
        if(!visited[ele]) dfs(ele,node);
        else if(ele!=par){ //if this is true that means node was visited before and it is not the parent , so cycle is there.
            vector<int> cycle;
            int curr = node;
            cycle.push_back(node);
            
            while(parent[curr]!=ele){
                curr=parent[curr];
                cycle.push_back(curr);
                }
                cycle.push_back(ele);
                cycle.push_back(node);
            
            cout<<cycle.size()<<endl;
            for(auto it : cycle) cout<<it<<" ";
            cout<<endl;
            exit(0);
            }
        }
    }
void findCycle(int n){
    for(int i = 1;i<=n;i++){
        if(!visited[i]){
            dfs(i,-1);
            }
        }
        cout<<"IMPOSSIBLE"<<endl;
    }
int main(){
    int n,m;
    cin>>n>>m;
    
    for(int i = 1;i<=m;i++){
        int u,v;
        cin>>u>>v;
        list[u].push_back(v);
        list[v].push_back(u);
        }
        findCycle(n);
    }
